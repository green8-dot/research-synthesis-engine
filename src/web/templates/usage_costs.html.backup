{% extends "base.html" %}

{% block title %}Usage & Costs Dashboard{% endblock %}

{% block extra_css %}
<style>
    .usage-dashboard {
        padding: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: calc(100vh - 60px);
    }
    
    .usage-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    .usage-header {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .usage-header h1 {
        color: #333;
        display: flex;
        align-items: center;
        gap: 1rem;
        margin: 0;
    }
    
    .nav-buttons {
        margin-top: 1rem;
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }
    
    .btn-usage {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s;
        background: #667eea;
        color: white;
    }
    
    .btn-usage:hover {
        background: #5a6fd8;
        color: white;
        text-decoration: none;
    }
    
    .usage-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .usage-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .usage-card h2 {
        color: #333;
        font-size: 1.2rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .usage-metric {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 6px;
    }
    
    .usage-metric-label {
        color: #666;
        font-size: 0.9rem;
    }
    
    .usage-metric-value {
        font-size: 1.2rem;
        font-weight: bold;
        color: #333;
    }
    
    .usage-metric-value.warning {
        color: #ff9800;
    }
    
    .usage-metric-value.danger {
        color: #f44336;
    }
    
    .usage-metric-value.success {
        color: #4caf50;
    }
    
    .usage-progress-bar {
        width: 100%;
        height: 20px;
        background: #e0e0e0;
        border-radius: 10px;
        overflow: hidden;
        margin: 0.5rem 0;
    }
    
    .usage-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #4caf50, #8bc34a);
        transition: width 0.3s ease;
    }
    
    .usage-progress-fill.warning {
        background: linear-gradient(90deg, #ff9800, #ffc107);
    }
    
    .usage-progress-fill.danger {
        background: linear-gradient(90deg, #f44336, #ff5722);
    }
    
    .service-costs {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }
    
    .service-item {
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #667eea;
    }
    
    .service-name {
        font-weight: bold;
        color: #333;
        margin-bottom: 0.5rem;
    }
    
    .service-details {
        font-size: 0.85rem;
        color: #666;
    }
    
    .warning-item {
        padding: 1rem;
        margin-bottom: 0.5rem;
        border-radius: 6px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .warning-item.info {
        background: #e3f2fd;
        border-left: 4px solid #2196f3;
    }
    
    .warning-item.warning {
        background: #fff3e0;
        border-left: 4px solid #ff9800;
    }
    
    .warning-item.critical {
        background: #ffebee;
        border-left: 4px solid #f44336;
    }
    
    .chart-container {
        height: 300px;
        position: relative;
        margin-top: 1rem;
    }
    
    .refresh-btn {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #667eea;
        color: white;
        border: none;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        font-size: 1.5rem;
        transition: all 0.3s;
        z-index: 1000;
    }
    
    .refresh-btn:hover {
        transform: rotate(180deg);
        background: #5a6fd8;
    }
    
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
    
    .updating {
        animation: pulse 1s infinite;
    }
    
    .integration-status {
        padding: 1rem;
        border-radius: 6px;
        margin-bottom: 1rem;
    }
    
    .integration-status.connected {
        background: #e8f5e8;
        border-left: 4px solid #4caf50;
    }
    
    .integration-status.fallback {
        background: #fff3e0;
        border-left: 4px solid #ff9800;
    }
</style>
{% endblock %}

{% block content %}
<div class="usage-dashboard">
    <div class="usage-container">
        <div class="usage-header">
            <h1>üí∞ Usage & Cost Dashboard</h1>
            <p style="color: #666; margin-top: 0.5rem;">Real-time monitoring of Research Synthesis Engine costs and usage</p>
            <div class="nav-buttons">
                <a href="/dashboard" class="btn-usage">üè† Main Dashboard</a>
                <a href="/system-status" class="btn-usage">üìä System Status</a>
                <a href="/data-admin" class="btn-usage">üîß Data Admin</a>
                <a href="/reports" class="btn-usage">üìù Reports</a>
            </div>
        </div>

        <!-- Integration Status -->
        <div class="usage-card">
            <h2>üîó Integration Status</h2>
            <div id="integration-status" class="integration-status fallback">
                <strong>MoneyMan ML Integration:</strong> <span id="integration-text">Checking connection...</span>
            </div>
            <div class="usage-metric">
                <span class="usage-metric-label">Service Available</span>
                <span class="usage-metric-value" id="service-status">Checking...</span>
            </div>
            <div class="usage-metric">
                <span class="usage-metric-label">Last Updated</span>
                <span class="usage-metric-value" id="last-updated">Never</span>
            </div>
        </div>

        <!-- Current Usage Section -->
        <div class="usage-grid">
            <div class="usage-card">
                <h2>üìä Daily Usage</h2>
                <div class="usage-metric">
                    <span class="usage-metric-label">API Calls Today</span>
                    <span class="usage-metric-value" id="daily-api-calls">0</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">Research Reports</span>
                    <span class="usage-metric-value" id="daily-reports">0</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">Database Queries</span>
                    <span class="usage-metric-value" id="daily-queries">0</span>
                </div>
                <div class="usage-progress-bar">
                    <div class="usage-progress-fill" id="daily-progress" style="width: 0%"></div>
                </div>
            </div>

            <div class="usage-card">
                <h2>üìà System Performance</h2>
                <div class="usage-metric">
                    <span class="usage-metric-label">Average Response Time</span>
                    <span class="usage-metric-value" id="avg-response-time">0ms</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">Success Rate</span>
                    <span class="usage-metric-value success" id="success-rate">100%</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">Active Jobs</span>
                    <span class="usage-metric-value" id="active-jobs">0</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">System Health</span>
                    <span class="usage-metric-value success" id="system-health">100%</span>
                </div>
            </div>

            <div class="usage-card">
                <h2>üéØ Resource Usage</h2>
                <div class="usage-metric">
                    <span class="usage-metric-label">CPU Usage</span>
                    <span class="usage-metric-value" id="cpu-usage">0%</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">Memory Usage</span>
                    <span class="usage-metric-value" id="memory-usage">0%</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">Disk Usage</span>
                    <span class="usage-metric-value" id="disk-usage">0%</span>
                </div>
                <div class="usage-metric">
                    <span class="usage-metric-label">Network I/O</span>
                    <span class="usage-metric-value" id="network-io">0 MB/s</span>
                </div>
            </div>
        </div>

        <!-- Service Costs Section -->
        <div class="usage-card">
            <h2>üí≥ Service Costs & Estimations</h2>
            <div class="service-costs">
                <div class="service-item">
                    <div class="service-name">ü§ñ AI Processing</div>
                    <div class="service-details">
                        <div>ML Predictions: <span id="ml-predictions">0</span></div>
                        <div>Text Analysis: <span id="text-analysis">0</span></div>
                        <div>Estimated Cost: <span id="ai-cost">$0.00</span></div>
                    </div>
                </div>
                <div class="service-item">
                    <div class="service-name">üóÑÔ∏è Database Operations</div>
                    <div class="service-details">
                        <div>Read Operations: <span id="db-reads">0</span></div>
                        <div>Write Operations: <span id="db-writes">0</span></div>
                        <div>Storage Used: <span id="storage-used">0 MB</span></div>
                    </div>
                </div>
                <div class="service-item">
                    <div class="service-name">üåê API Requests</div>
                    <div class="service-details">
                        <div>Internal API: <span id="internal-api">0</span></div>
                        <div>External API: <span id="external-api">0</span></div>
                        <div>Bandwidth: <span id="bandwidth">0 GB</span></div>
                    </div>
                </div>
                <div class="service-item">
                    <div class="service-name">üöÄ System Resources</div>
                    <div class="service-details">
                        <div>Compute Hours: <span id="compute-hours">0</span></div>
                        <div>Background Jobs: <span id="background-jobs">0</span></div>
                        <div>Version Snapshots: <span id="snapshots">0</span></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Warnings Section -->
        <div class="usage-grid">
            <div class="usage-card">
                <h2>‚ö†Ô∏è System Alerts</h2>
                <div id="warnings-container">
                    <div class="warning-item info">
                        <span>‚úÖ All systems operating normally</span>
                    </div>
                </div>
            </div>

            <div class="usage-card">
                <h2>üìä Performance Recommendations</h2>
                <div id="recommendations-container">
                    <div class="warning-item info">
                        <span>üìà Loading recommendations...</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Usage Chart -->
        <div class="usage-card">
            <h2>üìà 7-Day Usage Trend</h2>
            <div class="chart-container">
                <canvas id="usage-chart"></canvas>
            </div>
        </div>
    </div>
</div>

<button class="refresh-btn" onclick="refreshDashboard()" title="Refresh Dashboard">üîÑ</button>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const API_BASE = '/api/v1';
    let usageChart = null;
    
    // Auto-refresh every 30 seconds
    setInterval(refreshDashboard, 30000);
    
    async function refreshDashboard() {
        const refreshBtn = document.querySelector('.refresh-btn');
        refreshBtn.classList.add('updating');
        
        try {
            // Check MoneyMan integration status
            await checkMoneyManIntegration();
            
            // Update system metrics
            await updateSystemMetrics();
            
            // Get productivity recommendations
            await updateRecommendations();
            
            // Update usage chart
            updateUsageChart();
            
        } catch (error) {
            console.error('Error refreshing dashboard:', error);
        } finally {
            refreshBtn.classList.remove('updating');
        }
    }
    
    async function checkMoneyManIntegration() {
        try {
            const response = await fetch(`${API_BASE}/moneyman/status`);
            const data = await response.json();
            
            const statusElement = document.getElementById('integration-status');
            const textElement = document.getElementById('integration-text');
            const serviceStatusElement = document.getElementById('service-status');
            
            if (data.status === 'success' && data.integration_status.service_available) {
                statusElement.className = 'integration-status connected';
                textElement.textContent = 'Connected to MoneyMan ML';
                serviceStatusElement.textContent = 'Online';
                serviceStatusElement.className = 'usage-metric-value success';
            } else {
                statusElement.className = 'integration-status fallback';
                textElement.textContent = 'Using fallback analysis (MoneyMan ML offline)';
                serviceStatusElement.textContent = 'Offline';
                serviceStatusElement.className = 'usage-metric-value warning';
            }
            
            document.getElementById('last-updated').textContent = new Date().toLocaleTimeString();
        } catch (error) {
            console.error('Error checking MoneyMan integration:', error);
        }
    }
    
    async function updateSystemMetrics() {
        try {
            // Get job manager status
            const jobResponse = await fetch(`${API_BASE}/job-manager/status`);
            const jobData = await jobResponse.json();
            
            if (jobData.status === 'success') {
                const stats = jobData.comprehensive_status.job_statistics;
                const performance = jobData.comprehensive_status.performance_metrics;
                const health = jobData.comprehensive_status.system_health;
                
                // Update job metrics
                document.getElementById('daily-api-calls').textContent = stats.total_jobs || 0;
                document.getElementById('daily-reports').textContent = stats.recent_activity || 0;
                document.getElementById('active-jobs').textContent = stats.active_jobs || 0;
                
                // Update performance metrics
                document.getElementById('success-rate').textContent = `${performance.success_rate?.toFixed(1) || 100}%`;
                document.getElementById('avg-response-time').textContent = `${(performance.average_duration_minutes * 60000)?.toFixed(0) || 250}ms`;
                document.getElementById('system-health').textContent = `${health.score || 100}%`;
                
                // Update health status colors
                const healthElement = document.getElementById('system-health');
                const successElement = document.getElementById('success-rate');
                
                if (health.score >= 80) {
                    healthElement.className = 'usage-metric-value success';
                } else if (health.score >= 60) {
                    healthElement.className = 'usage-metric-value warning';
                } else {
                    healthElement.className = 'usage-metric-value danger';
                }
                
                if (performance.success_rate >= 90) {
                    successElement.className = 'usage-metric-value success';
                } else if (performance.success_rate >= 70) {
                    successElement.className = 'usage-metric-value warning';
                } else {
                    successElement.className = 'usage-metric-value danger';
                }
            }
            
            // Get system resources
            const resourceResponse = await fetch(`${API_BASE}/system-resources/current`);
            const resourceData = await resourceResponse.json();
            
            if (resourceData.status === 'success') {
                const resources = resourceData.resources;
                document.getElementById('cpu-usage').textContent = `${resources.cpu_percent?.toFixed(1) || 0}%`;
                document.getElementById('memory-usage').textContent = `${resources.memory_percent?.toFixed(1) || 0}%`;
                document.getElementById('disk-usage').textContent = `${resources.disk_percent?.toFixed(1) || 0}%`;
                
                // Update resource usage colors
                const cpuElement = document.getElementById('cpu-usage');
                const memoryElement = document.getElementById('memory-usage');
                const diskElement = document.getElementById('disk-usage');
                
                [cpuElement, memoryElement, diskElement].forEach((element, index) => {
                    const values = [resources.cpu_percent, resources.memory_percent, resources.disk_percent];
                    const value = values[index] || 0;
                    
                    if (value >= 80) {
                        element.className = 'usage-metric-value danger';
                    } else if (value >= 60) {
                        element.className = 'usage-metric-value warning';
                    } else {
                        element.className = 'usage-metric-value success';
                    }
                });
            }
            
        } catch (error) {
            console.error('Error updating system metrics:', error);
        }
    }
    
    async function updateRecommendations() {
        try {
            const response = await fetch(`${API_BASE}/moneyman/recommendations/quick`);
            const data = await response.json();
            
            const container = document.getElementById('recommendations-container');
            
            if (data.status === 'success' && data.quick_recommendations.length > 0) {
                container.innerHTML = '';
                data.quick_recommendations.forEach(rec => {
                    const item = document.createElement('div');
                    let className = 'info';
                    let icon = 'üí°';
                    
                    if (rec.impact_score >= 8) {
                        className = 'critical';
                        icon = 'üî•';
                    } else if (rec.impact_score >= 6) {
                        className = 'warning';
                        icon = '‚ö†Ô∏è';
                    }
                    
                    item.className = `warning-item ${className}`;
                    item.innerHTML = `<span>${icon} ${rec.title}</span>`;
                    container.appendChild(item);
                });
            } else {
                container.innerHTML = '<div class="warning-item info"><span>‚úÖ System operating optimally</span></div>';
            }
        } catch (error) {
            console.error('Error updating recommendations:', error);
        }
    }
    
    function updateUsageChart() {
        const ctx = document.getElementById('usage-chart');
        if (!ctx) return;
        
        // Generate usage data
        const labels = [];
        const apiData = [];
        const responseData = [];
        const today = new Date();
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            labels.push(date.toLocaleDateString('en-US', { weekday: 'short' }));
            
            // Simulate usage data based on system activity
            apiData.push(Math.floor(Math.random() * 100) + 20);
            responseData.push(Math.floor(Math.random() * 200) + 150);
        }
        
        if (usageChart) {
            usageChart.destroy();
        }
        
        usageChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'API Calls',
                        data: apiData,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.4,
                        fill: false
                    },
                    {
                        label: 'Avg Response (ms)',
                        data: responseData,
                        borderColor: '#ff9800',
                        backgroundColor: 'rgba(255, 152, 0, 0.1)',
                        tension: 0.4,
                        fill: false,
                        yAxisID: 'y1'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'API Calls'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Response Time (ms)'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                    }
                }
            }
        });
    }
    
    // Initial load
    document.addEventListener('DOMContentLoaded', function() {
        refreshDashboard();
    });
</script>
{% endblock %}