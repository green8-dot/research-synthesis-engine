{% extends "base.html" %}

{% block title %}Reports - Research Synthesis Engine{% endblock %}

{% block extra_css %}
<style>
.report-type-card {
    transition: all 0.3s ease;
    border: none;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    cursor: pointer;
}

.report-type-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

.report-status-badge {
    font-size: 0.8rem;
    padding: 0.25rem 0.75rem;
}

.report-actions .btn {
    margin-right: 0.5rem;
}

.reports-table-container {
    min-height: 400px;
}

.progress-indicator {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1050;
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
}

.report-preview {
    max-height: 300px;
    overflow-y: auto;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
    margin: 1rem 0;
}

.stat-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
}

.stat-number {
    font-size: 2rem;
    font-weight: bold;
}
</style>
{% endblock %}

{% block content %}
<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="h2 mb-0 text-gradient">
                    <i class="fas fa-file-alt me-2"></i>Research Reports
                </h1>
                <p class="text-muted mb-0">Generate comprehensive intelligence reports</p>
            </div>
            <div>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#generateReportModal">
                    <i class="fas fa-plus me-1"></i>Generate New Report
                </button>
                <button class="btn btn-outline-info ms-2" onclick="summarizeAllReports()">
                    <i class="fas fa-compress-alt me-1"></i>Summarize All
                </button>
                <button class="btn btn-outline-warning ms-2" onclick="testReportGeneration()">
                    <i class="fas fa-bug me-1"></i>Debug Test
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Reports Statistics -->
<div class="row mb-4">
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card stat-card">
            <div class="card-body text-center">
                <div class="stat-number" id="total-reports">0</div>
                <div class="fw-bold">Total Reports</div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card stat-card">
            <div class="card-body text-center">
                <div class="stat-number" id="reports-today">0</div>
                <div class="fw-bold">Generated Today</div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card stat-card">
            <div class="card-body text-center">
                <div class="stat-number" id="avg-confidence">0%</div>
                <div class="fw-bold">Avg Confidence</div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card stat-card">
            <div class="card-body text-center">
                <div class="stat-number" id="generating-now">0</div>
                <div class="fw-bold">Generating Now</div>
            </div>
        </div>
    </div>
</div>

<!-- Report Types -->
<div class="row mb-4">
    {% for report_type in report_types %}
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card h-100 report-type-card" onclick="generateReport('{{ report_type.id }}')">
            <div class="card-body text-center">
                <div class="mb-3">
                    <i class="{{ report_type.icon }} text-primary" style="font-size: 3rem;"></i>
                </div>
                <h5 class="card-title">{{ report_type.name }}</h5>
                <p class="card-text text-muted">{{ report_type.description }}</p>
                <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); generateReport('{{ report_type.id }}')">
                    <i class="fas fa-magic me-1"></i>Generate Now
                </button>
            </div>
        </div>
    </div>
    {% endfor %}
</div>

<!-- Recent Reports -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-history me-2"></i>Recent Reports
                </h5>
                <button class="btn btn-outline-secondary btn-sm" onclick="refreshReports()">
                    <i class="fas fa-sync-alt me-1"></i>Refresh
                </button>
            </div>
            <div class="card-body">
                <div class="table-responsive"><table class="table">
                        <thead>
                            <tr>
                                <th>Report Title</th>
                                <th>Type</th>
                                <th>Generated</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="reports-table">
                            <tr>
                                <td colspan="5" class="text-center text-muted py-4">
                                    <i class="fas fa-file-alt me-2"></i>No reports generated yet
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Generate Report Modal -->
<div class="modal fade" id="generateReportModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-magic me-2"></i>Generate New Report
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="generate-report-form" data-submit-api="/reports/generate" data-method="POST">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="report-type" class="form-label">Report Type</label>
                                <select class="form-select" id="report-type" name="report_type" required>
                                    <option value="">Choose report type...</option>
                                    {% for report_type in report_types %}
                                    <option value="{{ report_type.id }}">{{ report_type.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="report-title" class="form-label">Report Title</label>
                                <input type="text" class="form-control" id="report-title" name="title" 
                                       placeholder="Enter custom title (optional)">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="time-period" class="form-label">Time Period</label>
                                <select class="form-select" id="time-period" name="time_period">
                                    <option value="last_week">Last Week</option>
                                    <option value="last_month" selected>Last Month</option>
                                    <option value="last_quarter">Last Quarter</option>
                                    <option value="last_year">Last Year</option>
                                    <option value="custom">Custom Date Range</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="focus-area" class="form-label">Focus Area</label>
                                <select class="form-select" id="focus-area" name="focus_area">
                                    <option value="general">General Space Industry</option>
                                    <option value="manufacturing">Space Manufacturing</option>
                                    <option value="launch">Launch Services</option>
                                    <option value="satellites">Satellites & Communications</option>
                                    <option value="exploration">Space Exploration</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="companies" class="form-label">Companies to Include (optional)</label>
                        <input type="text" class="form-control" id="companies" name="companies" 
                               placeholder="e.g., SpaceX, Blue Origin, Virgin Galactic">
                        <div class="form-text">Separate multiple companies with commas</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="additional-notes" class="form-label">Additional Requirements</label>
                        <textarea class="form-control" id="additional-notes" name="notes" rows="3" 
                                  placeholder="Any specific requirements or focus areas for the report..."></textarea>
                    </div>
                    
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="include-charts" name="include_charts" checked>
                        <label class="form-check-label" for="include-charts">
                            Include charts and visualizations
                        </label>
                    </div>
                    
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="executive-summary" name="executive_summary" checked>
                        <label class="form-check-label" for="executive-summary">
                            Generate executive summary
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="generate-report-form" class="btn btn-primary">
                    <i class="fas fa-magic me-1"></i>Generate Report
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
function generateReport(reportType) {
    // Pre-fill the form with selected report type
    const modal = new bootstrap.Modal(document.getElementById('generateReportModal'));
    document.getElementById('report-type').value = reportType;
    modal.show();
}

let generatedReports = [];

function refreshReports() {
    loadReportsList();
    RSApp.showMessage('Reports refreshed', 'success');
}

function loadReportsList() {
    axios.get('/api/v1/reports/')
        .then(response => {
            const data = response.data;
            // Combine server reports with local generated reports
            const allReports = [...generatedReports, ...(data.reports || [])];
            updateReportsTable(allReports);
        })
        .catch(error => {
            console.error('Failed to load reports:', error);
            RSApp.showMessage('Failed to load reports', 'warning');
        });
}

function updateReportStatistics(reports) {
    const today = new Date().toDateString();
    const reportsToday = reports.filter(r => new Date(r.generated_at || r.created_at).toDateString() === today).length;
    const totalConfidence = reports.reduce((sum, r) => sum + (r.confidence_score || 0), 0);
    const avgConfidence = reports.length ? Math.round((totalConfidence / reports.length) * 100) : 0;
    const generating = reports.filter(r => r.status === 'generating').length;
    
    document.getElementById('total-reports').textContent = reports.length;
    document.getElementById('reports-today').textContent = reportsToday;
    document.getElementById('avg-confidence').textContent = avgConfidence + '%';
    document.getElementById('generating-now').textContent = generating;
}

function showProgressIndicator() {
    const indicator = document.getElementById('progress-indicator');
    const progress = document.getElementById('generation-progress');
    
    indicator.style.display = 'block';
    progress.style.width = '10%';
    
    // Simulate progress
    let currentProgress = 10;
    const progressInterval = setInterval(() => {
        currentProgress += Math.random() * 20;
        if (currentProgress > 90) currentProgress = 90;
        progress.style.width = currentProgress + '%';
    }, 500);
    
    // Store interval ID for cleanup
    window.currentProgressInterval = progressInterval;
}

function hideProgressIndicator() {
    const indicator = document.getElementById('progress-indicator');
    const progress = document.getElementById('generation-progress');
    
    // Complete the progress bar
    progress.style.width = '100%';
    
    setTimeout(() => {
        indicator.style.display = 'none';
        progress.style.width = '0%';
        
        // Clear progress interval
        if (window.currentProgressInterval) {
            clearInterval(window.currentProgressInterval);
            window.currentProgressInterval = null;
        }
    }, 500);
}

function updateReportsTable(reports) {
    const tbody = document.getElementById('reports-table');
    
    // Update statistics
    updateReportStatistics(reports);
    
    if (!reports.length) {
        tbody.innerHTML = `
            <tr>
                <td colspan="5" class="text-center text-muted py-4">
                    <i class="fas fa-file-alt me-2"></i>No reports generated yet
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = reports.map(report => `
        <tr>
            <td>
                <div class="fw-medium">${report.title || report.report_id}</div>
                <small class="text-muted">${report.report_id}</small>
            </td>
            <td>
                <span class="badge bg-primary">${report.type || 'Unknown'}</span>
            </td>
            <td>
                <small>${report.generated_at ? new Date(report.generated_at).toLocaleString() : 'N/A'}</small>
            </td>
            <td>
                <span class="badge badge-status-${report.status || 'unknown'}">
                    ${(report.status || 'unknown').charAt(0).toUpperCase() + (report.status || 'unknown').slice(1)}
                </span>
            </td>
            <td>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary btn-sm" onclick="viewReport('${report.report_id}')" title="View Report" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button" aria-label="Action button">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-outline-info btn-sm" onclick="showReportSummary('${report.report_id}', '${report.title}')" title="Summary" aria-label="Show summary">
                        <i class="fas fa-list-alt"></i>
                    </button>
                    <button class="btn btn-outline-success btn-sm" onclick="downloadReport('${report.report_id}')" title="Download" aria-label="Download report">
                        <i class="fas fa-download"></i>
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

function viewReport(reportId) {
    RSApp.showLoading(true);
    
    axios.get(`/api/v1/reports/download/${reportId}`)
        .then(response => {
            const report = response.data;
            showReportModal(report);
        })
        .catch(error => {
            console.error('Failed to load report:', error);
            RSApp.showMessage('Failed to load report details', 'danger');
        })
        .finally(() => {
            RSApp.showLoading(false);
        });
}

function downloadReport(reportId) {
    RSApp.showLoading(true);
    
    axios.get(`/api/v1/reports/download/${reportId}`)
        .then(response => {
            const report = response.data;
            const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${reportId}.json`;
            a.click();
            window.URL.revokeObjectURL(url);
            RSApp.showMessage('Report downloaded successfully', 'success');
        })
        .catch(error => {
            console.error('Failed to download report:', error);
            RSApp.showMessage('Failed to download report', 'danger');
        })
        .finally(() => {
            RSApp.showLoading(false);
        });
}

function showReportModal(report) {
    // Create modal for report viewing
    const modalHtml = `
        <div class="modal fade" id="viewReportModal" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">${report.title}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h6>Report Content</h6>
                                ${formatReportContent(report.content)}
                            </div>
                            <div class="col-md-4">
                                <h6>Report Details</h6>
                                <div class="list-group">
                                    <div class="list-group-item">
                                        <strong>Report ID:</strong> ${report.report_id}
                                    </div>
                                    <div class="list-group-item">
                                        <strong>Generated:</strong> ${new Date(report.generated_at).toLocaleString()}
                                    </div>
                                    <div class="list-group-item">
                                        <strong>Format:</strong> ${report.format}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="downloadReport('${report.report_id}')">
                            <i class="fas fa-download me-1"></i>Download
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remove any existing modal
    const existingModal = document.getElementById('viewReportModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Add new modal to body
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('viewReportModal'));
    modal.show();
    
    // Remove modal from DOM when hidden
    document.getElementById('viewReportModal').addEventListener('hidden.bs.modal', function() {
        this.remove();
    });
}

function formatReportContent(content) {
    if (!content) return '<p class="text-muted">No content available</p>';
    
    if (typeof content === 'string') {
        return `<p>${content}</p>`;
    }
    
    if (content.sections && Array.isArray(content.sections)) {
        return content.sections.map(section => `
            <div class="mb-4">
                <h6 class="text-primary">${section.title}</h6>
                <p>${section.content}</p>
            </div>
        `).join('');
    }
    
    if (content.executive_summary) {
        let html = '<div class="mb-4"><h6 class="text-primary">Executive Summary</h6>';
        
        if (content.executive_summary.key_findings) {
            html += '<ul>';
            content.executive_summary.key_findings.forEach(finding => {
                html += `<li>${finding}</li>`;
            });
            html += '</ul>';
        }
        
        html += '</div>';
        
        if (content.entity_analysis) {
            html += '<div class="mb-4"><h6 class="text-primary">Entity Analysis</h6>';
            if (content.entity_analysis.top_companies) {
                html += '<h6 class="h6">Top Companies</h6><ul>';
                content.entity_analysis.top_companies.forEach(company => {
                    html += `<li>${company.name} (${company.mentions} mentions)</li>`;
                });
                html += '</ul>';
            }
            html += '</div>';
        }
        
        return html;
    }
    
    return `<pre>${JSON.stringify(content, null, 2)}</pre>`;
}

// Handle form submission success
document.getElementById('generate-report-form').addEventListener('formSubmitSuccess', function(event) {
    console.log('Report form submission successful!', event.detail);
    
    const modal = bootstrap.Modal.getInstance(document.getElementById('generateReportModal'));
    modal.hide();
    
    // Add the newly generated report to local list and refresh from server
    const reportData = event.detail.response;
    console.log('Report data received:', reportData);
    
    if (reportData && reportData.report_id) {
        // Refresh the reports list from server instead of just local storage
        loadReportsList();
        
        // Show success message specific to reports
        RSApp.showMessage(`Report "${reportData.report_id}" generated successfully!`, 'success');
    } else {
        console.warn('No report_id in response:', reportData);
    }
    
    // Reset form
    this.reset();
});

// Also add error handler for debugging
document.getElementById('generate-report-form').addEventListener('submit', function(event) {
    console.log('Form submission triggered:', event.target);
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);
    console.log('Form data object:', data);
    console.log('API endpoint:', event.target.dataset.submitApi);
});

// Add a test button for debugging
function testReportGeneration() {
    console.log('Testing report generation directly...');
    const testData = {
        report_type: 'market_analysis',
        title: 'Debug Test Report',
        focus_area: 'testing',
        time_period: 'last_month'
    };
    
    console.log('Sending test data:', testData);
    
    fetch('/api/v1/reports/generate', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(testData)
    })
    .then(response => response.json())
    .then(data => {
        console.log('Direct API test result:', data);
        alert('Test successful: ' + data.message);
        loadReportsList();
    })
    .catch(error => {
        console.error('Direct API test error:', error);
        const errorMessage = error.message || error.toString() || 'Unknown error occurred';
        alert('Test failed: ' + errorMessage);
    });
}

// Add explicit submit button handler
document.addEventListener('DOMContentLoaded', function() {
    const submitButton = document.querySelector('button[type="submit"][form="generate-report-form"]');
    const form = document.getElementById('generate-report-form');
    
    console.log('DOM loaded - Submit button:', !!submitButton, 'Form:', !!form);
    
    if (submitButton && form) {
        // Remove any existing listeners first
        submitButton.replaceWith(submitButton.cloneNode(true));
        const newSubmitButton = document.querySelector('button[type="submit"][form="generate-report-form"]');
        
        newSubmitButton.addEventListener('click', function(e) {
            console.log('Submit button clicked - preventing default and handling manually');
            e.preventDefault();
            e.stopPropagation();
            
            // Show progress indicator
            showProgressIndicator();
            
            // Disable button to prevent double-clicks
            newSubmitButton.disabled = true;
            newSubmitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Generating...';
            
            // Get form data manually
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            
            // Handle checkboxes
            const checkboxes = form.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                data[checkbox.name] = checkbox.checked;
            });
            
            console.log('Submitting form data:', data);
            
            // Submit directly via fetch to avoid RSApp complexity
            fetch('/api/v1/reports/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                console.log('Report generation result:', result);
                
                // Hide progress indicator
                hideProgressIndicator();
                
                // Re-enable button
                newSubmitButton.disabled = false;
                newSubmitButton.innerHTML = '<i class="fas fa-magic me-1"></i>Generate Report';
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('generateReportModal'));
                if (modal) modal.hide();
                
                // Show success message
                alert('Report generated successfully: ' + result.message);
                
                // Refresh reports list
                loadReportsList();
                
                // Reset form
                form.reset();
            })
            .catch(error => {
                console.error('Report generation error:', error);
                
                // Hide progress indicator
                hideProgressIndicator();
                
                // Re-enable button
                newSubmitButton.disabled = false;
                newSubmitButton.innerHTML = '<i class="fas fa-magic me-1"></i>Generate Report';
                
                alert('Error generating report: ' + (error.message || 'Unknown error'));
            });
        });
    }
    
    console.log('Form submit handlers initialized');
});

// Report Summary Functions
function showReportSummary(reportId, reportTitle) {
    RSApp.showLoading(true, 'Generating Summary...');
    
    // Create or show summary modal
    let summaryModal = document.getElementById('reportSummaryModal');
    if (!summaryModal) {
        summaryModal = createSummaryModal();
        document.body.appendChild(summaryModal);
    }
    
    // Load report data and generate summary
    axios.get(`/api/v1/reports/download/${reportId}`)
        .then(response => {
            const report = response.data;
            const summary = generateReportSummary(report);
            
            // Update modal content
            document.getElementById('summary-modal-title').textContent = `Summary: ${reportTitle}`;
            document.getElementById('summary-chat-bubble').innerHTML = `
                <div class="chat-bubble">
                    <div class="chat-message">
                        <div class="message-header">
                            <i class="fas fa-robot text-primary"></i>
                            <span class="fw-semibold">AI Summary</span>
                            <small class="text-muted ms-auto">${new Date().toLocaleTimeString()}</small>
                        </div>
                        <div class="message-content">
                            ${summary}
                        </div>
                    </div>
                </div>
            `;
            
            // Show modal
            const modal = new bootstrap.Modal(summaryModal);
            modal.show();
        })
        .catch(error => {
            console.error('Failed to load report for summary:', error);
            RSApp.showMessage('Failed to generate summary', 'danger');
        })
        .finally(() => {
            RSApp.showLoading(false);
        });
}

function summarizeAllReports() {
    RSApp.showLoading(true, 'Analyzing All Reports...');
    
    // Create or show summary modal
    let summaryModal = document.getElementById('reportSummaryModal');
    if (!summaryModal) {
        summaryModal = createSummaryModal();
        document.body.appendChild(summaryModal);
    }
    
    // Load all reports
    axios.get('/api/v1/reports/')
        .then(response => {
            const data = response.data;
            const allReports = [...generatedReports, ...(data.reports || [])];
            
            if (allReports.length === 0) {
                RSApp.showMessage('No reports available to summarize', 'info');
                return;
            }
            
            const overallSummary = generateOverallSummary(allReports);
            
            // Update modal content
            document.getElementById('summary-modal-title').textContent = `Overall Summary (${allReports.length} Reports)`;
            document.getElementById('summary-chat-bubble').innerHTML = `
                <div class="chat-bubble">
                    <div class="chat-message">
                        <div class="message-header">
                            <i class="fas fa-robot text-primary"></i>
                            <span class="fw-semibold">AI Analysis</span>
                            <small class="text-muted ms-auto">${new Date().toLocaleTimeString()}</small>
                        </div>
                        <div class="message-content">
                            ${overallSummary}
                        </div>
                    </div>
                </div>
            `;
            
            // Show modal
            const modal = new bootstrap.Modal(summaryModal);
            modal.show();
        })
        .catch(error => {
            console.error('Failed to load reports for summary:', error);
            RSApp.showMessage('Failed to generate overall summary', 'danger');
        })
        .finally(() => {
            RSApp.showLoading(false);
        });
}

function createSummaryModal() {
    const modalHtml = `
        <div class="modal fade" id="reportSummaryModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="summary-modal-title">Report Summary</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="summary-chat-bubble" class="chat-container">
                            <!-- Summary content will be inserted here -->
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    const modalElement = document.createElement('div');
    modalElement.innerHTML = modalHtml;
    return modalElement.firstElementChild;
}

function generateReportSummary(report) {
    const content = report.content || {};
    const executiveSummary = content.executive_summary || {};
    const keyFindings = executiveSummary.key_findings || [];
    
    let summary = `<div class="summary-section">`;
    summary += `<h6 class="text-primary mb-3"><i class="fas fa-chart-line me-2"></i>Report Overview</h6>`;
    summary += `<p><strong>Report Type:</strong> ${report.type || 'Unknown'}</p>`;
    summary += `<p><strong>Generated:</strong> ${new Date(report.generated_at).toLocaleString()}</p>`;
    
    if (report.word_count) {
        summary += `<p><strong>Word Count:</strong> ${report.word_count} words</p>`;
    }
    
    if (report.confidence_score) {
        summary += `<p><strong>Confidence Score:</strong> ${Math.round(report.confidence_score * 100)}%</p>`;
    }
    
    if (keyFindings.length > 0) {
        summary += `<h6 class="text-success mt-4 mb-3"><i class="fas fa-lightbulb me-2"></i>Key Findings</h6>`;
        summary += `<ul class="list-unstyled">`;
        keyFindings.slice(0, 5).forEach(finding => {
            summary += `<li class="mb-2"><i class="fas fa-arrow-right text-primary me-2"></i>${finding}</li>`;
        });
        summary += `</ul>`;
    }
    
    if (content.entity_analysis) {
        const entityAnalysis = content.entity_analysis;
        summary += `<h6 class="text-info mt-4 mb-3"><i class="fas fa-network-wired me-2"></i>Entity Analysis</h6>`;
        
        if (entityAnalysis.top_companies && entityAnalysis.top_companies.length > 0) {
            summary += `<p><strong>Top Companies:</strong> `;
            summary += entityAnalysis.top_companies.slice(0, 3).map(c => c.name).join(', ');
            summary += `</p>`;
        }
        
        if (entityAnalysis.distribution) {
            const totalEntities = Object.values(entityAnalysis.distribution).reduce((a, b) => a + b, 0);
            summary += `<p><strong>Total Entities Analyzed:</strong> ${totalEntities}</p>`;
        }
    }
    
    summary += `</div>`;
    return summary;
}

function generateOverallSummary(reports) {
    const totalReports = reports.length;
    const reportTypes = [...new Set(reports.map(r => r.type).filter(Boolean))];
    const avgWordCount = Math.round(reports.reduce((sum, r) => sum + (r.word_count || 0), 0) / totalReports);
    const avgConfidence = Math.round(reports.reduce((sum, r) => sum + (r.confidence_score || 0), 0) / totalReports * 100);
    
    // Get date range
    const dates = reports.map(r => new Date(r.generated_at || r.created_at)).filter(d => !isNaN(d));
    const earliestDate = dates.length > 0 ? new Date(Math.min(...dates)) : null;
    const latestDate = dates.length > 0 ? new Date(Math.max(...dates)) : null;
    
    let summary = `<div class="summary-section">`;
    summary += `<h6 class="text-primary mb-3"><i class="fas fa-chart-bar me-2"></i>Report Collection Overview</h6>`;
    
    summary += `<div class="row mb-4">`;
    summary += `<div class="col-md-6">`;
    summary += `<div class="summary-stat-card p-3 bg-light rounded">`;
    summary += `<div class="stat-number text-primary">${totalReports}</div>`;
    summary += `<div class="stat-label">Total Reports</div>`;
    summary += `</div></div>`;
    
    summary += `<div class="col-md-6">`;
    summary += `<div class="summary-stat-card p-3 bg-light rounded">`;
    summary += `<div class="stat-number text-success">${avgWordCount}</div>`;
    summary += `<div class="stat-label">Avg. Word Count</div>`;
    summary += `</div></div></div>`;
    
    if (reportTypes.length > 0) {
        summary += `<p><strong>Report Types:</strong> ${reportTypes.join(', ')}</p>`;
    }
    
    if (avgConfidence > 0) {
        summary += `<p><strong>Average Confidence:</strong> ${avgConfidence}%</p>`;
    }
    
    if (earliestDate && latestDate) {
        summary += `<p><strong>Date Range:</strong> ${earliestDate.toLocaleDateString()} - ${latestDate.toLocaleDateString()}</p>`;
    }
    
    // Activity insights
    summary += `<h6 class="text-success mt-4 mb-3"><i class="fas fa-insights me-2"></i>Activity Insights</h6>`;
    const recentReports = reports.filter(r => {
        const reportDate = new Date(r.generated_at || r.created_at);
        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        return reportDate > weekAgo;
    }).length;
    
    summary += `<ul class="list-unstyled">`;
    summary += `<li class="mb-2"><i class="fas fa-arrow-right text-primary me-2"></i>${recentReports} reports generated in the past week</li>`;
    
    if (avgWordCount > 1000) {
        summary += `<li class="mb-2"><i class="fas fa-arrow-right text-primary me-2"></i>Reports are comprehensive with detailed analysis</li>`;
    } else {
        summary += `<li class="mb-2"><i class="fas fa-arrow-right text-primary me-2"></i>Reports focus on concise summaries</li>`;
    }
    
    if (avgConfidence > 80) {
        summary += `<li class="mb-2"><i class="fas fa-arrow-right text-success me-2"></i>High confidence in report accuracy</li>`;
    } else if (avgConfidence > 60) {
        summary += `<li class="mb-2"><i class="fas fa-arrow-right text-warning me-2"></i>Moderate confidence in report accuracy</li>`;
    }
    
    summary += `</ul></div>`;
    
    return summary;
}

// Load initial reports
loadReportsList();
</script>

<!-- Progress Indicator -->
<div id="progress-indicator" class="progress-indicator">
    <div class="text-center">
        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
        <h5>Generating Report...</h5>
        <p class="text-muted">This may take a few moments</p>
        <div class="progress mt-3">
            <div id="generation-progress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 30%"></div>
        </div>
    </div>
</div>
{% endblock %}